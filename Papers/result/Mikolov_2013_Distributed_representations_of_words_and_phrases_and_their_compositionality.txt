Nom du fichier d’origine : Mikolov 2013 Distributed representations of words and phrases and their compositionality



Titre du papier  : Distributed Representations of Words and Phrases

Auteur :  Distributed representations of words and phrases and their compositionality


Abstract de l’auteur : The recently introduced continuous Skip-gram model is an efficient method forlearning high-quality distributed vector representations that capture a large number of precise syntactic and semantic word relationships. In this paper we presentseveral extensions that improve both the quality of the vectors and the trainingspeed. By subsampling of the frequent words we obtain significant speedup andalso learn more regular word representations. We also describe a simple alternative to the hierarchical softmax called negative sampling.An inherent limitation of word representations is their indifference to word orderand their inability to represent idiomatic phrases. For example, the meanings of“Canada” and “Air” cannot be easily combined to obtain “Air Canada”. Motivatedby this example, we present a simple method for finding phrases in text, and showthat learning good vector representations for millions of phrases is possible.
Introduction : Distributed representations of words in a vector space help learning algorithms to achieve better
performance in natural language processing tasks by grouping similar words. One of the earliest use
of word representations dates back to 1986 due to Rumelhart, Hinton, and Williams [13]. This idea
has since been applied to statistical language modeling with considerable success [1]. The follow
up work includes applications to automatic speech recognition and machine translation [14, 7], and
a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].
Recently, Mikolov et al. [8] introduced the Skip-gram model, an efficient method for learning highquality vector representations of words from large amounts of unstructured text data. Unlike most
of the previously used neural network architectures for learning word vectors, training of the Skipgram model (see Figure 1) does not involve dense matrix multiplications. This makes the training
extremely efficient: an optimized single-machine implementation can train on more than 100 billion
words in one day.
The word representations computed using neural networks are very interesting because the learned
vectors explicitly encode many linguistic regularities and patterns. Somewhat surprisingly, many of
these patterns can be represented as linear translations. For example, the result of a vector calculation vec(“Madrid”) - vec(“Spain”) + vec(“France”) is closer to vec(“Paris”) than to any other word
vector [9, 8].
1

%&'(#)))))))))))'*+,-.#/+&))))))+(#'(#
!"#01$

!"#02$

!"#$

!"#32$

!"#31$

Figure 1: The Skip-gram model architecture. The training objective is to learn word vector representations
that are good at predicting the nearby words.

In this paper we present several extensions of the original Skip-gram model. We show that subsampling of frequent words during training results in a significant speedup (around 2x - 10x), and
improves accuracy of the representations of less frequent words. In addition, we present a simplified variant of Noise Contrastive Estimation (NCE) [4] for training the Skip-gram model that results
in faster training and better vector representations for frequent words, compared to more complex
hierarchical softmax that was used in the prior work [8].
Word representations are limited by their inability to represent idiomatic phrases that are not compositions of the individual words. For example, “Boston Globe” is a newspaper, and so it is not a
natural combination of the meanings of “Boston” and “Globe”. Therefore, using vectors to represent the whole phrases makes the Skip-gram model considerably more expressive. Other techniques
that aim to represent meaning of sentences by composing the word vectors, such as the recursive
autoencoders [15], would also benefit from using phrase vectors instead of the word vectors.
The extension from word based to phrase based models is relatively simple. First we identify a large
number of phrases using a data-driven approach, and then we treat the phrases as individual tokens
during the training. To evaluate the quality of the phrase vectors, we developed a test set of analogical reasoning tasks that contains both words and phrases. A typical analogy pair from our test set is
“Montreal”:“Montreal Canadiens”::“Toronto”:“Toronto Maple Leafs”. It is considered to have been
answered correctly if the nearest representation to vec(“Montreal Canadiens”) - vec(“Montreal”) +
vec(“Toronto”) is vec(“Toronto Maple Leafs”).
Finally, we describe another interesting property of the Skip-gram model. We found that simple
vector addition can often produce meaningful results. For example, vec(“Russia”) + vec(“river”) is
close to vec(“Volga River”), and vec(“Germany”) + vec(“capital”) is close to vec(“Berlin”). This
compositionality suggests that a non-obvious degree of language understanding can be obtained by
using basic mathematical operations on the word vector representations.


Corps : Distributed representations of words in a vector space help learning algorithms to achieve betterperformance in natural language processing tasks by grouping similar words. One of the earliest useof word representations dates back to 1986 due to Rumelhart, Hinton, and Williams [13]. This ideahas since been applied to statistical language modeling with considerable success [1]. The followup work includes applications to automatic speech recognition and machine translation [14, 7], anda wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].Recently, Mikolov et al. [8] introduced the Skip-gram model, an efficient method for learning highquality vector representations of words from large amounts of unstructured text data. Unlike mostof the previously used neural network architectures for learning word vectors, training of the Skipgram model (see Figure 1) does not involve dense matrix multiplications. This makes the trainingextremely efficient: an optimized single-machine implementation can train on more than 100 billionwords in one day.The word representations computed using neural networks are very interesting because the learnedvectors explicitly encode many linguistic regularities and patterns. Somewhat surprisingly, many ofthese patterns can be represented as linear translations. For example, the result of a vector calculation vec(“Madrid”) - vec(“Spain”) + vec(“France”) is closer to vec(“Paris”) than to any other wordvector [9, 8].1%&'(#)))))))))))'*+,-.#/+&))))))+(#'(#!"#01$!"#02$!"#$!"#32$!"#31$Figure 1: The Skip-gram model architecture. The training objective is to learn word vector representationsthat are good at predicting the nearby words.In this paper we present several extensions of the original Skip-gram model. We show that subsampling of frequent words during training results in a significant speedup (around 2x - 10x), andimproves accuracy of the representations of less frequent words. In addition, we present a simplified variant of Noise Contrastive Estimation (NCE) [4] for training the Skip-gram model that resultsin faster training and better vector representations for frequent words, compared to more complexhierarchical softmax that was used in the prior work [8].Word representations are limited by their inability to represent idiomatic phrases that are not compositions of the individual words. For example, “Boston Globe” is a newspaper, and so it is not anatural combination of the meanings of “Boston” and “Globe”. Therefore, using vectors to represent the whole phrases makes the Skip-gram model considerably more expressive. Other techniquesthat aim to represent meaning of sentences by composing the word vectors, such as the recursiveautoencoders [15], would also benefit from using phrase vectors instead of the word vectors.The extension from word based to phrase based models is relatively simple. First we identify a largenumber of phrases using a data-driven approach, and then we treat the phrases as individual tokensduring the training. To evaluate the quality of the phrase vectors, we developed a test set of analogical reasoning tasks that contains both words and phrases. A typical analogy pair from our test set is“Montreal”:“Montreal Canadiens”::“Toronto”:“Toronto Maple Leafs”. It is considered to have beenanswered correctly if the nearest representation to vec(“Montreal Canadiens”) - vec(“Montreal”) +vec(“Toronto”) is vec(“Toronto Maple Leafs”).Finally, we describe another interesting property of the Skip-gram model. We found that simplevector addition can often produce meaningful results. For example, vec(“Russia”) + vec(“river”) isclose to vec(“Volga River”), and vec(“Germany”) + vec(“capital”) is close to vec(“Berlin”). Thiscompositionality suggests that a non-obvious degree of language understanding can be obtained byusing basic mathematical operations on the word vector representations.2 The Skip-gram ModelThe training objective of the Skip-gram model is to find word representations that are useful forpredicting the surrounding words in a sentence or a document. More formally, given a sequence oftraining words w1 , w2 , w3 , . . . , wT , the objective of the Skip-gram model is to maximize the averagelog probabilityT1!T t=1!log p(wt+j |wt )(1)−c≤j≤c,j̸=0where c is the size of the training context (which can be a function of the center word wt ). Largerc results in more training examples and thus can lead to a higher accuracy, at the expense of the2training time. The basic Skip-gram formulation defines p(wt+j |wt ) using the softmax function:"#′ ⊤exp vwvwIO"#p(wO |wI ) = $(2)W′ ⊤w=1 exp vw vwI′where vw and vware the “input” and “output” vector representations of w, and W is the number of words in the vocabulary. This formulation is impractical because the cost of computing∇ log p(wO |wI ) is proportional to W , which is often large (105 –107 terms).2.1 Hierarchical SoftmaxA computationally efficient approximation of the full softmax is the hierarchical softmax. In thecontext of neural network language models, it was first introduced by Morin and Bengio [12]. Themain advantage is that instead of evaluating W output nodes in the neural network to obtain theprobability distribution, it is needed to evaluate only about log2 (W ) nodes.The hierarchical softmax uses a binary tree representation of the output layer with the W words asits leaves and, for each node, explicitly represents the relative probabilities of its child nodes. Thesedefine a random walk that assigns probabilities to words.More precisely, each word w can be reached by an appropriate path from the root of the tree. Letn(w, j) be the j-th node on the path from the root to w, and let L(w) be the length of this path, son(w, 1) = root and n(w, L(w)) = w. In addition, for any inner node n, let ch(n) be an arbitraryfixed child of n and let [[x]] be 1 if x is true and -1 otherwise. Then the hierarchical softmax definesp(wO |wI ) as follows:L(w)−1p(w|wI ) =%j=1"#⊤′σ [[n(w, j + 1) = ch(n(w, j))]] · vn(w,j)vwI(3)$Wwhere σ(x) = 1/(1 + exp(−x)). It can be verified that w=1 p(w|wI ) = 1. This implies that thecost of computing log p(wO |wI ) and ∇ log p(wO |wI ) is proportional to L(wO ), which on averageis no greater than log W . Also, unlike the standard softmax formulation of the Skip-gram which′assigns two representations vw and vwto each word w, the hierarchical softmax formulation hasone representation vw for each word w and one representation vn′ for every inner node n of thebinary tree.The structure of the tree used by the hierarchical softmax has a considerable effect on the performance. Mnih and Hinton explored a number of methods for constructing the tree structure and theeffect on both the training time and the resulting model accuracy [10]. In our work we use a binaryHuffman tree, as it assigns short codes to the frequent words which results in fast training. It hasbeen observed before that grouping words together by their frequency works well as a very simplespeedup technique for the neural network based language models [5, 8].2.2 Negative SamplingAn alternative to the hierarchical softmax is Noise Contrastive Estimation (NCE), which was introduced by Gutmann and Hyvarinen [4] and applied to language modeling by Mnih and Teh [11].NCE posits that a good model should be able to differentiate data from noise by means of logisticregression. This is similar to hinge loss used by Collobert and Weston [2] who trained the modelsby ranking the data above noise.While NCE can be shown to approximately maximize the log probability of the softmax, the Skipgram model is only concerned with learning high-quality vector representations, so we are free tosimplify NCE as long as the vector representations retain their quality. We define Negative sampling(NEG) by the objective⊤′log σ(vwvwI ) +Ok!i=1'&′ ⊤v)Ewi ∼Pn (w) log σ(−vwwIi3(4)Country and Capital Vectors Projected by PCA2ChinaBeijing1.5RussiaJapanMoscowTokyo1AnkaraTurkey0.5PolandGermanyFrance0-0.5Italy-1Spain-1.5PortugalWarsawBerlinParisAthensRomeGreeceMadridLisbon-2-2-1.5-1-0.500.511.52Figure 2: Two-dimensional PCA projection of the 1000-dimensional Skip-gram vectors of countries and theircapital cities. The figure illustrates ability of the model to automatically organize concepts and learn implicitlythe relationships between them, as during the training we did not provide any supervised information aboutwhat a capital city means.which is used to replace every log P (wO |wI ) term in the Skip-gram objective. Thus the task is todistinguish the target word wO from draws from the noise distribution Pn (w) using logistic regression, where there are k negative samples for each data sample. Our experiments indicate that valuesof k in the range 5–20 are useful for small training datasets, while for large datasets the k can be assmall as 2–5. The main difference between the Negative sampling and NCE is that NCE needs bothsamples and the numerical probabilities of the noise distribution, while Negative sampling uses onlysamples. And while NCE approximately maximizes the log probability of the softmax, this propertyis not important for our application.Both NCE and NEG have the noise distribution Pn (w) as a free parameter. We investigated a numberof choices for Pn (w) and found that the unigram distribution U (w) raised to the 3/4rd power (i.e.,U (w)3/4 /Z) outperformed significantly the unigram and the uniform distributions, for both NCEand NEG on every task we tried including language modeling (not reported here).2.3 Subsampling of Frequent WordsIn very large corpora, the most frequent words can easily occur hundreds of millions of times (e.g.,“in”, “the”, and “a”). Such words usually provide less information value than the rare words. Forexample, while the Skip-gram model benefits from observing the co-occurrences of “France” and“Paris”, it benefits much less from observing the frequent co-occurrences of “France” and “the”, asnearly every word co-occurs frequently within a sentence with “the”. This idea can also be appliedin the opposite direction; the vector representations of frequent words do not change significantlyafter training on several million examples.To counter the imbalance between the rare and frequent words, we used a simple subsampling approach: each word wi in the training set is discarded with probability computed by the formulaP (wi ) = 1 −4(tf (wi )(5)MethodNEG-5NEG-15HS-HuffmanNCE-5NEG-5NEG-15HS-HuffmanTime [min] Syntactic [%] Semantic [%] Total accuracy [%]38635459976358614153404738604553The following results use 10−5 subsampling146158603661616121525955Table 1: Accuracy of various Skip-gram 300-dimensional models on the analogical reasoning taskas defined in [8]. NEG-k stands for Negative Sampling with k negative samples for each positivesample; NCE stands for Noise Contrastive Estimation and HS-Huffman stands for the HierarchicalSoftmax with the frequency-based Huffman codes.where f (wi ) is the frequency of word wi and t is a chosen threshold, typically around 10−5 .We chose this subsampling formula because it aggressively subsamples words whose frequencyis greater than t while preserving the ranking of the frequencies. Although this subsampling formula was chosen heuristically, we found it to work well in practice. It accelerates learning and evensignificantly improves the accuracy of the learned vectors of the rare words, as will be shown in thefollowing sections.3 Empirical ResultsIn this section we evaluate the Hierarchical Softmax (HS), Noise Contrastive Estimation, NegativeSampling, and subsampling of the training words. We used the analogical reasoning task1 introducedby Mikolov et al. [8]. The task consists of analogies such as “Germany” : “Berlin” :: “France” : ?,which are solved by finding a vector x such that vec(x) is closest to vec(“Berlin”) - vec(“Germany”)+ vec(“France”) according to the cosine distance (we discard the input words from the search). Thisspecific example is considered to have been answered correctly if x is “Paris”. The task has twobroad categories: the syntactic analogies (such as “quick” : “quickly” :: “slow” : “slowly”) and thesemantic analogies, such as the country to capital city relationship.For training the Skip-gram models, we have used a large dataset consisting of various news articles(an internal Google dataset with one billion words). We discarded from the vocabulary all wordsthat occurred less than 5 times in the training data, which resulted in a vocabulary of size 692K.The performance of various Skip-gram models on the word analogy test set is reported in Table 1.The table shows that Negative Sampling outperforms the Hierarchical Softmax on the analogicalreasoning task, and has even slightly better performance than the Noise Contrastive Estimation. Thesubsampling of the frequent words improves the training speed several times and makes the wordrepresentations significantly more accurate.It can be argued that the linearity of the skip-gram model makes its vectors more suitable for suchlinear analogical reasoning, but the results of Mikolov et al. [8] also show that the vectors learnedby the standard sigmoidal recurrent neural networks (which are highly non-linear) improve on thistask significantly as the amount of the training data increases, suggesting that non-linear models alsohave a preference for a linear structure of the word representations.4 Learning PhrasesAs discussed earlier, many phrases have a meaning that is not a simple composition of the meanings of its individual words. To learn vector representation for phrases, we first find words thatappear frequently together, and infrequently in other contexts. For example, “New York Times” and“Toronto Maple Leafs” are replaced by unique tokens in the training data, while a bigram “this is”will remain unchanged.1code.google.com/p/word2vec/source/browse/trunk/questions-words.txt5New YorkSan JoseBostonPhoenixDetroitOaklandAustriaBelgiumSteve BallmerSamuel J. PalmisanoNewspapersNew York TimesBaltimoreSan Jose Mercury NewsCincinnatiNHL TeamsBoston BruinsMontrealPhoenix CoyotesNashvilleNBA TeamsDetroit PistonsTorontoGolden State WarriorsMemphisAirlinesAustrian AirlinesSpainBrussels AirlinesGreeceCompany executivesMicrosoftLarry PageIBMWerner VogelsBaltimore SunCincinnati EnquirerMontreal CanadiensNashville PredatorsToronto RaptorsMemphis GrizzliesSpainairAegean AirlinesGoogleAmazonTable 2: Examples of the analogical reasoning task for phrases (the full test set has 3218 examples).The goal is to compute the fourth phrase using the first three. Our best model achieved an accuracyof 72% on this dataset.This way, we can form many reasonable phrases without greatly increasing the size of the vocabulary; in theory, we can train the Skip-gram model using all n-grams, but that would be too memoryintensive. Many techniques have been previously developed to identify phrases in the text; however,it is out of scope of our work to compare them. We decided to use a simple data-driven approach,where phrases are formed based on the unigram and bigram counts, usingscore(wi , wj ) =count(wi wj ) − δ.count(wi ) × count(wj )(6)The δ is used as a discounting coefficient and prevents too many phrases consisting of very infrequent words to be formed. The bigrams with score above the chosen threshold are then used asphrases. Typically, we run 2-4 passes over the training data with decreasing threshold value, allowing longer phrases that consists of several words to be formed. We evaluate the quality of the phraserepresentations using a new analogical reasoning task that involves phrases. Table 2 shows examplesof the five categories of analogies used in this task. This dataset is publicly available on the web2 .4.1 Phrase Skip-Gram ResultsStarting with the same news data as in the previous experiments, we first constructed the phrasebased training corpus and then we trained several Skip-gram models using different hyperparameters. As before, we used vector dimensionality 300 and context size 5. This setting alreadyachieves good performance on the phrase dataset, and allowed us to quickly compare the NegativeSampling and the Hierarchical Softmax, both with and without subsampling of the frequent tokens.The results are summarized in Table 3.The results show that while Negative Sampling achieves a respectable accuracy even with k = 5,using k = 15 achieves considerably better performance. Surprisingly, while we found the Hierarchical Softmax to achieve lower performance when trained without subsampling, it became the bestperforming method when we downsampled the frequent words. This shows that the subsamplingcan result in faster training and can also improve accuracy, at least in some cases.2code.google.com/p/word2vec/source/browse/trunk/questions-phrases.txtMethodNEG-5NEG-15HS-HuffmanDimensionality300300300No subsampling [%]24271910−5 subsampling [%]274247Table 3: Accuracies of the Skip-gram models on the phrase analogy dataset. The models weretrained on approximately one billion words from the news dataset.6Vasco de GamaLake BaikalAlan BeanIonian Seachess masterNEG-15 with 10−5 subsamplingLingsugurGreat Rift ValleyRebbeca NaomiRuegenchess grandmasterHS with 10−5 subsamplingItalian explorerAral SeamoonwalkerIonian IslandsGarry KasparovTable 4: Examples of the closest entities to the given short phrases, using two different models.Czech + currencykorunaCheck crownPolish zoltyCTKVietnam + capitalHanoiHo Chi Minh CityViet NamVietnameseGerman + airlinesairline Lufthansacarrier Lufthansaflag carrier LufthansaLufthansaRussian + riverMoscowVolga RiverupriverRussiaFrench + actressJuliette BinocheVanessa ParadisCharlotte GainsbourgCecile DeTable 5: Vector compositionality using element-wise addition. Four closest tokens to the sum of twovectors are shown, using the best Skip-gram model.To maximize the accuracy on the phrase analogy task, we increased the amount of the training databy using a dataset with about 33 billion words. We used the hierarchical softmax, dimensionalityof 1000, and the entire sentence for the context. This resulted in a model that reached an accuracyof 72%. We achieved lower accuracy 66% when we reduced the size of the training dataset to 6Bwords, which suggests that the large amount of the training data is crucial.To gain further insight into how different the representations learned by different models are, we didinspect manually the nearest neighbours of infrequent phrases using various models. In Table 4, weshow a sample of such comparison. Consistently with the previous results, it seems that the bestrepresentations of phrases are learned by a model with the hierarchical softmax and subsampling.5 Additive CompositionalityWe demonstrated that the word and phrase representations learned by the Skip-gram model exhibita linear structure that makes it possible to perform precise analogical reasoning using simple vectorarithmetics. Interestingly, we found that the Skip-gram representations exhibit another kind of linearstructure that makes it possible to meaningfully combine words by an element-wise addition of theirvector representations. This phenomenon is illustrated in Table 5.The additive property of the vectors can be explained by inspecting the training objective. The wordvectors are in a linear relationship with the inputs to the softmax nonlinearity. As the word vectorsare trained to predict the surrounding words in the sentence, the vectors can be seen as representingthe distribution of the context in which a word appears. These values are related logarithmicallyto the probabilities computed by the output layer, so the sum of two word vectors is related to theproduct of the two context distributions. The product works here as the AND function: words thatare assigned high probabilities by both word vectors will have high probability, and the other wordswill have low probability. Thus, if “Volga River” appears frequently in the same sentence togetherwith the words “Russian” and “river”, the sum of these two word vectors will result in such a featurevector that is close to the vector of “Volga River”.6 Comparison to Published Word RepresentationsMany authors who previously worked on the neural network based representations of words havepublished their resulting models for further use and comparison: amongst the most well known authors are Collobert and Weston [2], Turian et al. [17], and Mnih and Hinton [10]. We downloadedtheir word vectors from the web3 . Mikolov et al. [8] have already evaluated these word representations on the word analogy task, where the Skip-gram models achieved the best performance with ahuge margin.3http://metaoptimize.com/projects/wordreprs/7Model(training time)RedmondHavelninjutsugraffiticapitulateCollobert (50d)(2 months)conyerslubbockkeeneMcCarthyAlstonCousinsPodhurstHarlangAgarwalRedmond Wash.Redmond WashingtonMicrosoftplauendzerzhinskyosterreichJewellArzuOvitzPontiffPinochetRodionovVaclav Havelpresident Vaclav HavelVelvet Revolutionreikikohonakarateninjamartial artsswordsmanshipcheesecakegossipdioramasgunfireemotionimpunityanaestheticsmonkeysJewsspray paintgrafittitaggersabdicateaccederearmMavericksplanninghesitatedcapitulationcapitulatedcapitulatingTurian (200d)(few weeks)Mnih (100d)(7 days)Skip-Phrase(1000d, 1 day)Table 6: Examples of the closest tokens given various well known models and the Skip-gram modeltrained on phrases using over 30 billion training words. An empty cell means that the word was notin the vocabulary.To give more insight into the difference of the quality of the learned vectors, we provide empiricalcomparison by showing the nearest neighbours of infrequent words in Table 6. These examples showthat the big Skip-gram model trained on a large corpus visibly outperforms all the other models inthe quality of the learned representations. This can be attributed in part to the fact that this modelhas been trained on about 30 billion words, which is about two to three orders of magnitude moredata than the typical size used in the prior work. Interestingly, although the training set is muchlarger, the training time of the Skip-gram model is just a fraction of the time complexity required bythe previous model architectures.7 ConclusionThis work has several key contributions. We show how to train distributed representations of wordsand phrases with the Skip-gram model and demonstrate that these representations exhibit linearstructure that makes precise analogical reasoning possible. The techniques introduced in this papercan be used also for training the continuous bag-of-words model introduced in [8].We successfully trained models on several orders of magnitude more data than the previously published models, thanks to the computationally efficient model architecture. This results in a greatimprovement in the quality of the learned word and phrase representations, especially for the rareentities. We also found that the subsampling of the frequent words results in both faster trainingand significantly better representations of uncommon words. Another contribution of our paper isthe Negative sampling algorithm, which is an extremely simple training method that learns accuraterepresentations especially for frequent words.The choice of the training algorithm and the hyper-parameter selection is a task specific decision,as we found that different problems have different optimal hyperparameter configurations. In ourexperiments, the most crucial decisions that affect the performance are the choice of the modelarchitecture, the size of the vectors, the subsampling rate, and the size of the training window.A very interesting result of this work is that the word vectors can be somewhat meaningfully combined using just simple vector addition. Another approach for learning representations of phrasespresented in this paper is to simply represent the phrases with a single token. Combination of thesetwo approaches gives a powerful yet simple way how to represent longer pieces of text, while having minimal computational complexity. Our work can thus be seen as complementary to the existingapproach that attempts to represent phrases using recursive matrix-vector operations [16].We made the code for training the word and phrase vectors based on the techniques described in thispaper available as an open-source project4 .4code.google.com/p/word2vec8
Conclusion : This work has several key contributions. We show how to train distributed representations of wordsand phrases with the Skip-gram model and demonstrate that these representations exhibit linearstructure that makes precise analogical reasoning possible. The techniques introduced in this papercan be used also for training the continuous bag-of-words model introduced in [8].We successfully trained models on several orders of magnitude more data than the previously published models, thanks to the computationally efficient model architecture. This results in a greatimprovement in the quality of the learned word and phrase representations, especially for the rareentities. We also found that the subsampling of the frequent words results in both faster trainingand significantly better representations of uncommon words. Another contribution of our paper isthe Negative sampling algorithm, which is an extremely simple training method that learns accuraterepresentations especially for frequent words.The choice of the training algorithm and the hyper-parameter selection is a task specific decision,as we found that different problems have different optimal hyperparameter configurations. In ourexperiments, the most crucial decisions that affect the performance are the choice of the modelarchitecture, the size of the vectors, the subsampling rate, and the size of the training window.A very interesting result of this work is that the word vectors can be somewhat meaningfully combined using just simple vector addition. Another approach for learning representations of phrasespresented in this paper is to simply represent the phrases with a single token. Combination of thesetwo approaches gives a powerful yet simple way how to represent longer pieces of text, while having minimal computational complexity. Our work can thus be seen as complementary to the existingapproach that attempts to represent phrases using recursive matrix-vector operations [16].We made the code for training the word and phrase vectors based on the techniques described in thispaper available as an open-source project4 .4code.google.com/p/word2vec8
Discussion :  
Biblio : [1] Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and Christian Janvin. A neural probabilistic language model. The Journal of Machine Learning Research, 3:1137–1155, 2003  
  [2] Ronan Collobert and Jason Weston. A unified architecture for natural language processing: deep neural networks with multitask learning. In Proceedings of the 25th international conference on Machine learning, pages 160–167. ACM, 2008  
  [3] Xavier Glorot, Antoine Bordes, and Yoshua Bengio. Domain adaptation for large-scale sentiment classification: A deep learning approach. In ICML, 513–520, 2011  
  [4] Michael U Gutmann and Aapo Hyvärinen. Noise-contrastive estimation of unnormalized statistical models, with applications to natural image statistics. The Journal of Machine Learning Research, 13:307–361, 2012  
  [5] Tomas Mikolov, Stefan Kombrink, Lukas Burget, Jan Cernocky, and Sanjeev Khudanpur. Extensions of recurrent neural network language model. In Acoustics, Speech and Signal Processing (ICASSP), 2011 IEEE International Conference on, pages 5528–5531. IEEE, 2011  
  [6] Tomas Mikolov, Anoop Deoras, Daniel Povey, Lukas Burget and Jan Cernocky. Strategies for Training Large Scale Neural Network Language Models. In Proc. Automatic Speech Recognition and Understanding, 2011  
  [7] Tomas Mikolov. Statistical Language Models Based on Neural Networks. PhD thesis, PhD Thesis, Brno University of Technology, 2012  
  [8] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient estimation of word representations in vector space. ICLR Workshop, 2013  
  [9] Tomas Mikolov, Wen-tau Yih and Geoffrey Zweig. Linguistic Regularities in Continuous Space Word Representations. In Proceedings of NAACL HLT, 2013  
  [10] Andriy Mnih and Geoffrey E Hinton. A scalable hierarchical distributed language model. Advances in neural information processing systems, 21:1081–1088, 2009  
  [11] Andriy Mnih and Yee Whye Teh. A fast and simple algorithm for training neural probabilistic language models. arXiv preprint arXiv:1206.6426, 2012  
  [12] Frederic Morin and Yoshua Bengio. Hierarchical probabilistic neural network language model. In Proceedings of the international workshop on artificial intelligence and statistics, pages 246–252, 2005  
  [13] David E Rumelhart, Geoffrey E Hintont, and Ronald J Williams. Learning representations by backpropagating errors. Nature, 323(6088):533–536, 1986  
  [14] Holger Schwenk. Continuous space language models. Computer Speech and Language, vol. 21, 2007  
  [15] Richard Socher, Cliff C. Lin, Andrew Y. Ng, and Christopher D. Manning. Parsing natural scenes and natural language with recursive neural networks. In Proceedings of the 26th International Conference on Machine Learning (ICML), volume 2, 2011  
  [16] Richard Socher, Brody Huval, Christopher D. Manning, and Andrew Y. Ng. Semantic Compositionality Through Recursive Matrix-Vector Spaces. In Proceedings of the 2012 Conference on Empirical Methods in Natural Language Processing (EMNLP), 2012  
  [17] Joseph Turian, Lev Ratinov, and Yoshua Bengio. Word representations: a simple and general method for semi-supervised learning. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 384–394. Association for Computational Linguistics, 2010  
  [18] Peter D. Turney and Patrick Pantel. From frequency to meaning: Vector space models of semantics. In Journal of Artificial Intelligence Research, 37:141-188, 2010  
  [19] Peter D. Turney. Distributional semantics beyond words: Supervised learning of analogy and paraphrase  
  In Transactions of the Association for Computational Linguistics (TACL), 353–366, 2013  
  [20] Jason Weston, Samy Bengio, and Nicolas Usunier. Wsabie: Scaling up to large vocabulary image annotation. In Proceedings of the Twenty-Second international joint conference on Artificial Intelligence-Volume Volume Three, pages 2764–2770. AAAI Press, 2011  
   9  