<article><preamble>Metsis 2006 Spam filtering with naive bayes-which naive bayes</preamble><titre>Spam Filtering with Naive Bayes &#8211; Which Naive Bayes? &#8727;</titre><auteur>
Vangelis Metsis

Institute of Informatics and

Telecommunications,
N.C.S.R. &#8220;Demokritos&#8221;,

&#8224;

Athens, Greece

Ion Androutsopoulos
Department of Informatics,

Athens University of

Economics and Business,

Athens, Greece

Georgios Paliouras

Institute of Informatics and

Telecommunications,
N.C.S.R. &#8220;Demokritos&#8221;,

Athens, Greece

ABSTRACT
Naive Bayes is very popular in commercial and open-source
anti-spam e-mail &#64257;lters. There are, however, several forms
of Naive Bayes, something the anti-spam literature does not
always acknowledge. We discuss &#64257;ve di&#64256;erent versions of
Naive Bayes, and compare them on six new, non-encoded
datasets, that contain ham messages of particular Enron
users and fresh spam messages. The new datasets, which
we make publicly available, are more realistic than previous
comparable benchmarks, because they maintain the tempo-
ral order of the messages in the two categories, and they
emulate the varying proportion of spam and ham messages
that users receive over time. We adopt an experimental
procedure that emulates the incremental training of person-
alized spam &#64257;lters, and we plot roc curves that allow us to
compare the di&#64256;erent versions of nb over the entire tradeo&#64256;
between true positives and true negatives.

1.

INTRODUCTION

Although several machine learning algorithms have been
employed in anti-spam e-mail &#64257;ltering, including algorithms
that are considered top-performers in text classi&#64257;cation, like
Boosting and Support Vector Machines (see, for example,
[4, 6, 10, 16]), Naive Bayes (nb) classi&#64257;ers currently appear
to be particularly popular in commercial and open-source
spam &#64257;lters. This is probably due to their simplicity, which
makes them easy to implement, their linear computational
complexity, and their accuracy, which in spam &#64257;ltering is
comparable to that of more elaborate learning algorithms
[2]. There are, however, several forms of nb classi&#64257;ers, and
the anti-spam literature does not always acknowledge this.
In their seminal papers on learning-based spam &#64257;lters,
Sahami et al. [21] used a nb classi&#64257;er with a multi-variate
Bernoulli model (this is also the model we had used in [1]), a
form of nb that relies on Boolean attributes, whereas Pantel
and Lin [19] in e&#64256;ect adopted the multinomial form of nb,
which normally takes into account term frequencies. Mc-
Callum and Nigam [17] have shown experimentally that the

&#8727;This version of the paper contains some minor corrections
&#8224;Work carried out mostly while at the Department of Infor-

in the description of Flexible Bayes, which were made after
the conference.

matics, Athens University of Economics and Business.

CEAS 2006 - Third Conference on Email and Anti-Spam, July 27-28, 2006,
Mountain View, California USA

multinomial nb performs generally better than the multi-
variate Bernoulli nb in text classi&#64257;cation, a &#64257;nding that
Schneider [24] and Hovold [12] veri&#64257;ed with spam &#64257;lter-
ing experiments on Ling-Spam and the pu corpora [1, 2,
23]. In further work on text classi&#64257;cation, which included
experiments on Ling-Spam, Schneider [25] found that the
multinomial nb surprisingly performs even better when term
frequencies are replaced by Boolean attributes.

The multi-variate Bernoulli nb can be modi&#64257;ed to accom-
modate continuous attributes, leading to what we call the
multi-variate Gauss nb, by assuming that the values of each
attribute follow a normal distribution within each category
[14]. Alternatively, the distribution of each attribute in each
category can be taken to be the average of several normal
distributions, one for every di&#64256;erent value the attribute has
in the training data of that category, leading to a nb ver-
sion that John and Langley [14] call Flexible Bayes (fb).
In previous work [2], we found that fb clearly outperforms
the multi-variate Gauss nb on the pu corpora, when the at-
tributes are term frequencies divided by document lengths,
but we did not compare fb against the other nb versions.

In this paper we shed more light on the &#64257;ve versions of
nb mentioned above, and we evaluate them experimentally
on six new, non-encoded datasets, collectively called Enron-
Spam, which we make publicly available.1 Each dataset con-
tains ham (non-spam) messages from a single user of the
Enron corpus [15], to which we have added fresh spam mes-
sages with varying ham-spam ratios. Although a similar
approach was adopted in the public benchmark of the trec
2005 Spam Track, to be discussed below, we believe that
our datasets are better suited to evaluations of personalized
&#64257;lters, i.e., &#64257;lters that are trained on incoming messages of
a particular user they are intended to protect, which is the
type of &#64257;lters the experiments of this paper consider. Un-
like Ling-Spam and the pu corpora, in the new datasets we
maintain the order in which the original messages of the
two categories were received, and we emulate the varying
proportion of ham and spam messages that users receive
over time. This allows us to conduct more realistic exper-
iments, and to take into account the incremental training
of personal &#64257;lters. Furthermore, rather than focussing on a
handful of relative misclassi&#64257;cation costs (cost of false posi-
tives vs. false negatives; &#955; = 1, 9, 999 in our previous work),

Enron-Spam datasets

1The
from
available
and
http://www.iit.demokritos.gr/skel/i-config/
in
http://www.aueb.gr/users/ion/publications.html
both raw and pre-processed form. Ling-Spam and the pu
corpora are also available from the same addresses.

are

we plot entire roc curves, which allow us to compare the
di&#64256;erent versions of nb over the entire tradeo&#64256; between true
positives and true negatives.

Note that several publicly available spam &#64257;lters appear
to be using techniques described as &#8220;Bayesian&#8221;, but which
are very di&#64256;erent from any form of nb discussed in the acad-
emic literature and any other technique that would normally
be called Bayesian therein.2 Here we focus on nb versions
published in the academic literature, leaving comparisons
against other &#8220;Bayesian&#8221; techniques for future work.

Section 2 below presents the event models and assump-
tions of the nb versions we considered. Section 3 explains
how the datasets of our experiments were assembled and
the evaluation methodology we used; it also highlights some
pitfalls that have to be avoided when constructing spam &#64257;l-
tering benchmarks. Section 4 then presents and discusses
our experimental results. Section 5 concludes and provides
directions for further work.

2. NAIVE BAYES CLASSIFIERS

As a simpli&#64257;cation, we focus on the textual content of
the messages. Operational &#64257;lters would also consider infor-
mation such as the presence of suspicious headers or token
obfuscation [11, 21], which can be added as additional at-
tributes in the message representation discussed below. Al-
ternatively, separate classi&#64257;ers can be trained for textual
and other attributes, and then form an ensemble [9, 22].
In our experiments, each message is ultimately represented
as a vector hx1, . . . , xmi, where x1, . . . , xm are the values of
attributes X1, . . . , Xm, and each attribute provides infor-
mation about a particular token of the message.3
In the
simplest case, all the attributes are Boolean: Xi = 1 if the
message contains the token; otherwise, Xi = 0. Alterna-
tively, their values may be term frequencies (tf), showing
how many times the corresponding token occurs in the mes-
sage.4 Attributes with tf values carry more information
than Boolean ones. Hence, one might expect nb versions
that use tf attributes to perform better than those with
Boolean attributes, an expectation that is not always con-
&#64257;rmed, as already mentioned. A third alternative we em-
ployed, hereafter called normalized tf, is to divide term
frequencies by the total number of token occurrences in the
message, to take into account the message&#8217;s length. The
motivation is that knowing, for example, that &#8220;rich&#8221; occurs
3 times in a message may be a good indication that the mes-
sage is spam if it is only two paragraphs long, but not if the
message is much longer.

Following common text classi&#64257;cation practice, we do not
assign attributes to tokens that are too rare (we discard
tokens that do not occur in at least 5 messages of the train-
ing data). We also rank the remaining attributes by in-
formation gain, and use only the m best, as in [1, 2, 21],
and elsewhere. We experimented with m = 500, 1000, and
3000. Note that the information gain ranking treats the at-

2These techniques derive mostly from P. Graham&#8217;s &#8220;A plan
for spam&#8221;; see http://www.paulgraham.com/spam.html.
3Attributes may also be mapped to character or token n-
grams, but previous attempts to use n-grams in spam &#64257;lter-
ing led to contradictory or inconclusive results [2, 12, 19].
4We treat punctuation and other non-alphabetic characters
as separate tokens. Many of these are highly informative as
attributes, because they are more common in spam messages
(especially obfuscated ones) than ham messages; see [2].

tributes as Boolean, which may not be entirely satisfactory
when employing a nb version with non-Boolean attributes.
Schneider [24] experimented with alternative versions of the
information gain measure, intended to be more suitable to
the tf-valued attributes of the multinomial nb. His results,
however, indicate that the alternative versions do not lead
to higher accuracy, although sometimes they allow the same
level of accuracy to be reached with fewer attributes.
vector ~x = hx1, . . . , xmi belongs in category c is:

From Bayes&#8217; theorem, the probability that a message with

p(c | ~x) =

p(c) &#183; p(~x | c)

.

p(~x)

Since the denominator does not depend on the category,
nb classi&#64257;es each message in the category that maximizes
p(c)&#183; p(~x | c). In the case of spam &#64257;ltering, this is equivalent
to classifying a message as spam whenever:

p(cs) &#183; p(~x | cs)

p(cs) &#183; p(~x | cs) + p(ch) &#183; p(~x | ch)

&gt; T,

with T = 0.5, where ch and cs denote the ham and spam cat-
egories. By varying T , one can opt for more true negatives
(correctly classi&#64257;ed ham messages) at the expense of fewer
true positives (correctly classi&#64257;ed spam messages), or vice-
versa. The a priori probabilities p(c) are typically estimated
by dividing the number of training messages of category c
by the total number of training messages. The probabilities
p(~x | c) are estimated di&#64256;erently in each nb version.
2.1 Multi-variate Bernoulli NB

Let us denote by F = {t1, . . . , tm} the set of tokens that
correspond to the m attributes after attribute selection. The
multi-variate Bernoulli nb treats each message d as a set
of tokens, containing (only once) each ti that occurs in
d. Hence, d can be represented by a binary vector ~x =
hx1, . . . , xmi, where each xi shows whether or not ti oc-
curs in d. Furthermore, each message d of category c is
seen as the result of m Bernoulli trials, where at each trial
we decide whether or not ti will occur in d. The prob-
ability of a positive outcome at trial i (ti occurs in d) is
p(ti | c). The multi-variate Bernoulli nb makes the addi-
tional assumption that the outcomes of the trials are inde-
pendent given the category. This is a &#8220;naive&#8221; assumption,
since word co-occurrences in a category are not indepen-
dent. Similar assumptions are made in all nb versions, and
although in most cases they are over-simplistic, they still
lead to very good performance in many classi&#64257;cation tasks;
see, for example, [5] for a theoretical explanation. Then,
p(~x | c) can be computed as:

p(~x | c) =

m

Y

i=1

p(ti | c)xi &#183; (1 &#8722; p(ti | c))(1&#8722;xi),

and the criterion for classifying a message as spam becomes:

p(cs) &#183; Qm

i=1 p(ti | cs)xi &#183; (1 &#8722; p(ti | cs))(1&#8722;xi)

i=1 p(ti | c)xi &#183; (1 &#8722; p(ti | c))(1&#8722;xi) &gt; T,
Pc&#8712;{cs,ch} p(c) &#183; Qm
where each p(t | c) is estimated using a Laplacean prior as:

p(t | c) =

1 + Mt,c
2 + Mc

,

and Mt,c is the number of training messages of category c
that contain token t, while Mc is the total number of training
messages of category c.

2.2 Multinomial NB, TF attributes

The multinomial nb with tf attributes treats each mes-
sage d as a bag of tokens, containing each one of ti as many
times as it occurs in d. Hence, d can be represented by a
vector ~x = hx1, . . . , xmi, where each xi is now the number
of occurrences of ti in d. Furthermore, each message d of
category c is seen as the result of picking independently |d|
tokens from F with replacement, with probability p(ti | c)
for each ti.5 Then, p(~x | c) is the multinomial distribution:

p(~x | c) = p(|d|) &#183; |d|! &#183; m
Y

i=1

p(ti | c)xi

xi!

,

where we have followed the common assumption [17, 24,
25] that |d| does not depend on the category c. This is an
additional over-simplistic assumption, which is more ques-
tionable in spam &#64257;ltering. For example, the probability of
receiving a very long spam message appears to be smaller
than that of receiving an equally long ham message.

The criterion for classifying a message as spam becomes:

p(cs) &#183; Qm

i=1 p(ti | cs)xi

Pc&#8712;{cs,ch} p(c) &#183; Qm

i=1 p(ti | c)xi

&gt; T,

where each p(t | c) is estimated using a Laplacean prior as:

p(t | c) =

1 + Nt,c
m + Nc

,

i=1 Nti,c.

and Nt,c is now the number of occurrences of token t in the
training messages of category c, while Nc = Pm
2.3 Multinomial NB, Boolean attributes
The multinomial nb with Boolean attributes is the same
as with tf attributes, including the estimates of p(t | c),
except that the attributes are now Boolean. It di&#64256;ers from
the multi-variate Bernoulli nb in that it does not take into
account directly the absence (xi = 0) of tokens from the
message (there is no (1 &#8722; p(ti | c))(1&#8722;xi) factor), and it esti-
mates the p(t | c) with a di&#64256;erent Laplacean prior.

It may seem strange that the multinomial nb might per-
form better with Boolean attributes, which provide less in-
formation than tf ones. As Schneider [25] points out, how-
ever, it has been proven [7] that the multinomial nb with
tf attributes is equivalent to a nb version with attributes
modelled as following Poisson distributions in each category,
assuming that the document length is independent of the
category. Hence, the multinomial nb may perform better
with Boolean attributes, if tf attributes in reality do not
follow Poisson distributions.
2.4 Multi-variate Gauss NB

The multi-variate Bernoulli nb can be modi&#64257;ed for real-
valued attributes, by assuming that each attribute follows a
normal distribution g(xi; &#181;i,c, &#963;i,c) in each category c, where:

g(xi; &#181;i,c, &#963;i,c) =

&#8730;
1
2&#960;

&#963;i,c

&#8722; (xi&#8722;&#181;i,c)2
e

2&#963;2

i,c

,

and the mean (&#181;i,c) and typical deviation (&#963;i,c) of each dis-
tribution are estimated from the training data. Then, as-

5In e&#64256;ect, this is a unigram language model. Additional
variants of the multinomial nb can be formed by using n-
gram language models instead [20]. See also [13] for other
improvements that can be made to the multinomial nb.

suming again that the values of the attributes are indepen-
dent given the category, we get:

p(~x | c) =

m

Y

i=1

g(xi; &#181;i,c, &#963;i,c),

and the criterion for classifying a message as spam becomes:

p(cs) &#183; Qm

Pc&#8712;{cs,ch} p(c) &#183; Qm

i=1 g(xi; &#181;i,cs , &#963;i,cs )

i=1 g(xi; &#181;i,c, &#963;i,c)

&gt; T.

This allows us to use normalized tf attributes, whose val-
ues are (non-negative) reals, unlike the tf attributes of the
multinomial nb. Real-valued attributes, however, may not
follow normal distributions. With our normalized tf at-
tributes, there is also the problem that negative values are
not used, which leads to a signi&#64257;cant loss of probability mass
in the (presumed) normal distributions of attributes whose
variances are large and means are close to zero.
2.5 Flexible Bayes
Instead of using a single normal distribution for each at-
tribute per category, fb models p(xi | c) as the average of
Li,c normal distributions with di&#64256;erent mean values, but the
same typical deviation:

p(xi | c) =

1

Li,c

&#183;

Li,c
X

l=1

g(xi; &#181;i,c,l, &#963;c),

where Li,c is the number of di&#64256;erent values Xi has in the
training data of category c. Each of these values is used as
the mean &#181;i,c,l of a normal distribution of that category. All
the distributions of a category c are taken to have the same
typical deviation, estimated as &#963;c = 1&#8730;
, where Mc is again
Mc
the number of training messages in c. Hence, the distrib-
utions of each category become narrower as more training
messages of that category are accumulated; in the case of our
normalized tf attributes, this also alleviates the problem of
probability mass loss of the multi-variate Gauss nb. By
averaging several normal distributions, fb can approximate
the true distributions of real-valued attributes more closely
than the multi-variate Gauss nb, when the assumption that
the attributes follow normal distributions is violated.
The computational complexity of all &#64257;ve nb versions is
O(m &#183; N ) during training, where N is the total number of
training messages. At classi&#64257;cation time, the computational
complexity of the &#64257;rst four versions is O(m), while the com-
plexity of fb is O(m &#183; N ), because of the need to sum the
Li distributions. Consult [2] for further details.

3. DATASETS AND METHODOLOGY

There has been signi&#64257;cant e&#64256;ort to generate public bench-
mark datasets for anti-spam &#64257;ltering. One of the main con-
cerns is how to protect the privacy of the users (senders and
receivers) whose ham messages are included in the datasets.
The &#64257;rst approach is to use ham messages collected from
freely accessible newsgroups, or mailing lists with public
archives. Ling-Spam, the earliest of our benchmark datasets,
follows this approach [23]. It consists of spam messages re-
ceived at the time and ham messages retrieved from the
archives of the Linguist list, a moderated and, hence, spam-
free list about linguistics. Ling-Spam has the disadvan-
tage that its ham messages are more topic-speci&#64257;c than the

messages most users receive. Hence, it can lead to over-
optimistic estimates of the performance of learning-based
spam &#64257;lters. The SpamAssassin corpus is similar, in that
its ham messages are publicly available; they were collected
from public fora, or they were donated by users with the un-
derstanding they may be made public.6 Since they were re-
ceived by di&#64256;erent users, however, SpamAssassin&#8217;s ham mes-
sages are less topic-speci&#64257;c than those a single user would
receive. Hence, the resulting dataset is inappropriate for
experimentation with personalized spam &#64257;lters.

An alternative solution to the privacy problem is to dis-
tribute information about each message (e.g., the frequen-
cies of particular words in each message), rather than the
messages themselves. The Spambase collection follows this
approach. It consists of vectors, each representing a single
message (spam or ham), with each vector containing the
values of pre-selected attributes, mostly word frequencies.
The same approach was adopted in a corpus developed for a
recently announced ecml-pkdd 2006 challenge.7 Datasets
that adopt this approach, however, are much more restric-
tive than Ling-Spam and the SpamAssassin corpus, because
their messages are not available in raw form, and, hence, it
is impossible to experiment with attributes other than those
chosen by their creators.

A third approach is to release benchmarks each consist-
ing of messages received by a particular user, after replacing
each token by a unique number in all the messages. The
mapping between tokens and numbers is not released, mak-
ing it extremely di&#64259;cult to recover the original messages,
other than perhaps common words and phrases therein. This
bypasses privacy problems, while producing messages whose
token sequences are very close, from a statistical point of
view, to the original ones. We have used this encoding
scheme in the pu corpora [1, 2, 23]. However, the loss of
the original tokens still imposes restrictions; for example, it
is impossible to experiment with di&#64256;erent tokenizers.

Following the Enron investigation, the personal &#64257;les of ap-
proximately 150 Enron employees were made publicly avail-
able.8 The &#64257;les included a large number of personal e-mail
messages, which have been used to create e-mail classi&#64257;-
cation benchmarks [3, 15], including a public benchmark
corpus for the trec 2005 Spam Track.9 During the con-
struction of the latter benchmark, several spam &#64257;lters were
employed to weed spam out of the Enron message collection.
The collection was then augmented with spam messages col-
lected in 2005, leading to a benchmark with 43,000 ham and
approximately 50,000 spam messages. The 2005 Spam Track
experiments did not separate the resulting corpus into per-
sonal mailboxes, although such a division might have been
possible via the &#8216;To:&#8217; &#64257;eld. Hence, the experiments corre-
sponded to the scenario where a single &#64257;lter is trained on a
collection of messages received by many di&#64256;erent users, as
opposed to using personalized &#64257;lters.

As we were more interested in personalized spam &#64257;lters,
we focussed on six Enron employees who had large mail-

6The SpamAssassin corpus and Spambase are available
from http://www.spamassassin.org/publiccorpus/ and
http://www.ics.uci.edu/&#8764;mlearn/MLRepository.html.
7See http://www.ecmlpkdd2006.org/challenge.html.
8See http://fercic.aspensys.com/members/manager.asp.
9Consult http://plg.uwaterloo.ca/ gvcormac/spam/ for
further details. We do not discuss the other three corpora
of the 2005 Spam Track, as they are not publicly available.

boxes. More speci&#64257;cally, we used the mailboxes of employees
farmer-d, kaminski-v, kitchen-l, williams-w3, beck-s,
and lokay-m, in the cleaned-up form provided by Bekker-
man [3], which includes only ham messages.10 We also used
spam messages obtained from four di&#64256;erent sources: (1) the
SpamAssassin corpus, (2) the Honeypot project,11 (3) the
spam collection of Bruce Guenter (bg),12 and spam collected
by the third author of this paper (gp).

The &#64257;rst three spam sources above collect spam via traps
(e.g., e-mail addresses published on the Web in a way that
makes it clear to humans, but not to crawlers, that they
should not be used), resulting in multiple copies of the same
messages. We applied a heuristic to the spam collection we
obtained from each one of the &#64257;rst three spam sources, to
identify and remove multiple copies; the heuristic is based
on the number of common text lines in each pair of spam
messages. After removing duplicates, we merged the spam
collections obtained from sources 1 and 2, because the mes-
sages from source 1 were too few to be used on their own
and did not include recent spam, whereas the messages from
source 2 were fresher, but they covered a much shorter pe-
riod of time. The resulting collection (dubbed sh; SpamAs-
sassin spam plus Honeypot) contains messages sent between
May 2001 and July 2005. From the third spam source (bg)
we kept messages sent between August 2004 and July 2005,
a period ending close to the time our datasets were con-
structed. Finally, the fourth spam source is the only one
that does not rely on traps. It contains all the spam mes-
sages received by gp between December 2003 and September
2005; duplicates were not removed in this case, as they are
part of a normal stream of incoming spam.

The six ham message collections (six Enron users) were
each paired with one of the three spam collections (sh, bg,
gp). Since the vast majority of spam messages are not per-
sonalized, we believe that mixing ham messages received
by one user with spam messages received by others leads
to reasonable benchmarks, provided that additional steps
are taken, as discussed below. The same approach can be
used in future to replace the spam messages of our datasets
with fresher ones. We also varied the ham-spam ratios, by
randomly subsampling the spam or ham messages, where
necessary. In three of the resulting benchmark datasets, we
used a ham-spam ratio of approximately 3:1, while in the
other three we inverted the ratio to 1:3. The total number
of messages in each dataset is between &#64257;ve and six thousand.
The six datasets emulate di&#64256;erent situations faced by real
users, allowing us to obtain a more complete picture of the
performance of learning-based &#64257;lters. Table 1 summarizes
the characteristics of the six datasets. Hereafter, we refer
to the &#64257;rst, second, . . . , sixth dataset of Table 1 as Enron1,
Enron2, . . . , Enron6, respectively.

In addition to what was mentioned above, the six datasets
were subjected to the following pre-processing steps. First,
we removed messages sent by the owner of the mailbox (we
checked if the address of the owner appeared in the &#8216;To:&#8217;,
&#8216;Cc:&#8217;, or &#8216;Bcc:&#8217; &#64257;elds), since we believe e-mail users are in-
creasingly adopting better ways to keep copies of outgoing
messages. Second, as a simpli&#64257;cation, we removed all html
tags and the headers of the messages, keeping only their

10The mailboxes can be downloaded from http://www.cs.
umass.edu/&#8764;ronb/datasets/enron flat.tar.gz.
11Consult http://www.projecthoneypot.org/.
12See http://untroubled.org/spam/.

Table 1: Composition of the six benchmark datasets.

ham + spam
farmer-d + gp
kaminski-v + sh
kitchen-l + bg
williams-w3 + gp

beck-s + sh
lokay-m + bg

ham:spam
3672:1500
4361:1496
4012:1500
1500:4500
1500:3675
1500:4500

ham, spam periods

[12/99, 1/02], [12/03, 9/05]
[12/99, 5/01], [5/01, 7/05]
[2/01, 2/02], [8/04, 7/05]
[4/01, 2/02], 12/03, 9/05]
[1/00, 5/01], [5/01, 7/05]
[6/00, 3/02], [8/04, 7/05]

subjects and bodies. In operational &#64257;lters, html tags and
headers can provide additional useful attributes, as men-
tioned above; hence, our datasets lead to conservative esti-
mates of the performance of operational &#64257;lters. Third, we
removed spam messages written in non-Latin character sets,
because the ham messages of our datasets are all written in
Latin characters, and, therefore, non-Latin spam messages
would be too easy to identify; i.e., we opted again for harder
datasets, that lead to conservative performance estimates.

One of the main goals of our evaluation was to emulate
the situation that a new user of a personalized learning-
based anti-spam &#64257;lter faces: the user starts with a small
amount of training messages, and retrains the &#64257;lter as new
messages arrive. As noted in [8], this incremental retraining
and evaluation di&#64256;ers signi&#64257;cantly from the cross-validation
experiments that are commonly used to measure the perfor-
mance of learning algorithms, and which have been adopted
in many previous spam &#64257;ltering experiments, including our
own [2]. There are several reasons for this, including the
varying size of the training set, the increasingly more so-
phisticated tricks used by spam senders over time, the vary-
ing proportion of spam to ham messages in di&#64256;erent time
periods, which makes the estimation of priors di&#64259;cult, and
the topic shift of spam messages over time. Hence, an incre-
mental retraining and evaluation procedure that also takes
into account the characteristics of spam that vary over time
is essential when comparing di&#64256;erent learning algorithms in
spam &#64257;ltering.
In order to realize this incremental proce-
dure with the use of our six datasets, we needed to order the
messages of each dataset in a way that preserves the original
order of arrival of the messages in each category; i.e., each
spam message must be preceded by all spam messages that
arrived earlier, and the same applies to ham messages. The
varying ham-ratio ratio over time also had to be emulated.
(The reader is reminded that the spam and ham messages
of each dataset are from di&#64256;erent time periods. Hence, one
cannot simply use the dates of the messages.) This was
achieved by using the following algorithm in each dataset:

1. Let S and H be the sets of spam and ham messages of

the dataset, respectively.

2. Order the messages of H by time of arrival.
3. Insert |S| spam slots between the ordered messages of
H by |S| independent random draws from {1, . . . ,|H|}
with replacement. If the outcome of a draw is i, a new
spam slot is inserted after the i-th ham message. A
ham message may thus be followed by several slots.

4. Fill the spam slots with the messages of S, by iter-
atively &#64257;lling the earliest empty spam slot with the
oldest message of S that has not been placed to a slot.

The actual dates of the messages are then discarded, and
we assume that the messages (ham and spam) of each dataset

Figure 1: Fluctuation of the ham-spam ratio.

arrive in the order produced by the algorithm above. Fig-
ure 1 shows the resulting &#64258;uctuation of the ham-spam ratio
over batches of 100 adjacent messages each. The &#64257;rst batch
contains the &#8220;oldest&#8221; 100 messages, the second one the 100
messages that &#8220;arrived&#8221; immediately after those of the &#64257;rst
batch, etc. The ham-spam ratio in the entire dataset is 2.45.

In each ordered dataset, the incremental retraining and

evaluation procedure was implemented as follows:

1. Split the sequence of messages into batches b1, . . . , bl
of k adjacent messages each, preserving the order of
arrival. Batch bl may have less than k messages.

2. For i = 1 to l &#8722; 1, train the &#64257;lter (including attribute
selection) on the messages of batches 1, . . . , i, and test
it on the messages of bi+1.

Note that at the end of the evaluation, each message of
the dataset (excluding b1) will have been classi&#64257;ed exactly
once. The number of true positives (TP ) is the number of
spam messages that have been classi&#64257;ed as spam, and sim-
ilarly for false positives (FP , ham misclassi&#64257;ed as spam),
true negatives (TN , correctly classi&#64257;ed ham), and false neg-
atives (FN , spam misclassi&#64257;ed as ham). We set k = 100,
which emulates the situation where the &#64257;lter is retrained
every 100 new messages.13 We assume that the user marks
as false negatives spam messages that pass the &#64257;lter, and in-
spects periodically for false positives a &#8220;spam&#8221; folder, where
messages identi&#64257;ed by the &#64257;lter as spam end up.

In our evaluation, we used spam recall ( TP

TP+FN ) and ham
recall ( TN
TN +FP ). Spam recall is the proportion of spam mes-
sages that the &#64257;lter managed to identify correctly (how much
spam it blocked), whereas ham recall is the proportion of
ham messages that passed the &#64257;lter. Spam recall is the com-
plement of spam misclassi&#64257;cation rate, and ham recall the
complement of ham misclassi&#64257;cation rate, the two measures
that were used in the trec 2005 Spam Track. In order to
evaluate the di&#64256;erent nb versions across the entire tradeo&#64256;
between true positives and true negatives, we present the
evaluation results by means of roc curves, plotting sensi-
tivity (spam recall) against 1&#8722; speci&#64257;city (the complement
of ham recall, or ham misclassi&#64257;cation rate). This is the
13An nb-based &#64257;lter can easily be retrained on-line, immedi-
ately after receiving each new message. We chose k = 100
to make it easier to add in future work additional experi-
ments with other learning algorithms, such as svms, which
are computationally more expensive to train.

Enron1 - ham:spam ratio per batch11.522.533.544.515913172125293337414549batch numbernb version

fb

mv Gauss

mn tf

Enr1 Enr2 Enr3 Enr4 Enr5 Enr6
0.34
7.87
5.27
5.56
0.88
0.18
0.88
2.10
2.31
0.20

0.11
3.36
0.75
1.14
0.39

3.46
4.75
0.95
0.95
1.97

1.43
1.97
0.20
1.09
2.04

1.31
12.7
0.50
0.45
0.43

mv Bernoulli
mn Boolean
Table 2: Maximum di&#64256;erence (&#215;100) in spam recall
across 500, 1000, 3000 attributes for T = 0.5.

nb version

fb

mv Gauss

mn tf

Enr1 Enr2 Enr3 Enr4 Enr5 Enr6
0.34
0.61
4.88
1.17
2.17
1.22
1.22
1.47
0.53
2.17

0.48
5.91
1.70
2.11
1.36

0.23
0.75
1.38
0.63
0.68

1.72
5.94
1.02
6.37
0.10

0.54
1.77
0.61
2.04
0.48

mv Bernoulli
mn Boolean
Table 3: Maximum di&#64256;erence (&#215;100) in ham recall
across 500, 1000, 3000 attributes for T = 0.5.

normal de&#64257;nition of roc analysis, when treating spam as
the positive and ham as the negative class.

The roc curves capture the overall performance of the
di&#64256;erent nb versions in each dataset, but fail to provide
a picture of the progress made by each nb version during
the incremental procedure. For this reason, we additionally
examine the learning curves of the &#64257;ve methods in terms of
the two measures for T = 0.5, i.e., we plot spam and ham
recall as the training set increases during the incremental
retraining and evaluation procedure.

4. EXPERIMENTAL RESULTS

4.1 Size of attribute set

We &#64257;rst examined the impact of the number of attributes
on the e&#64256;ectiveness of the &#64257;ve nb versions.14 As mentioned
above, we experimented with 500, 1000, and 3000 attributes.
The full results of these experiments (not reported here) in-
dicate that overall the best results are achieved with 3000
attributes, as one might have expected. The di&#64256;erences in
e&#64256;ectiveness across di&#64256;erent numbers of attributes, however,
are rather insigni&#64257;cant. As an example, Tables 2 and 3 show
the maximum di&#64256;erences in spam and ham recall, respec-
tively, across the three sizes of the attribute set, for each nb
version and dataset, with T = 0.5; note that the di&#64256;erences
are in percentage points. The tables show that the di&#64256;er-
ences are very small in all &#64257;ve nb versions for this threshold
value, and we obtained very similar results for all thresholds.
Consequently, in operational &#64257;lters the di&#64256;erences in e&#64256;ec-
tiveness may not justify the increased computational cost
that larger attribute sets require, even though the increase
in computational cost is linear in the number of attributes.
4.2 Comparison of NB versions

Figure 2 shows the roc curves of the &#64257;ve nb versions in
each one of the six datasets.15 All the curves are for 3000
attributes, and the error bars correspond to 0.95 con&#64257;dence
intervals; we show error bars only at some points to avoid

14We used a modi&#64257;ed version of filtron [18] for our experi-
ments, with weka&#8217;s implementations of the &#64257;ve nb versions;
see http://www.cs.waikato.ac.nz/&#8764;ml/weka/.
15Please view the &#64257;gures in color, consulting the on-line ver-
sion of this paper if necessary; see http://www.ceas.cc/.

cluttering the diagrams. Since the tolerance of most users
on misclassifying ham messages is very limited, we have re-
stricted the horizontal axis (1&#8722; speci&#64257;city = 1&#8722; ham recall)
of all diagrams to [0, 0.2], i.e., a maximum of 20% of mis-
classi&#64257;ed ham, in order to improve the readability of the
diagrams. On the vertical axis (sensitivity, spam recall) we
show the full range, which allows us to examine what propor-
tion of spam messages the &#64257;ve nb versions manage to block
when requesting a very low ham misclassi&#64257;cation rate (when
1&#8722;speci&#64257;city approaches 0). The optimal performance point
in an roc diagram is the top-left corner, while the area un-
der each curve (auc) is often seen as a summary of the
performance of the corresponding method. We do not, how-
ever, believe that standard auc is a good measure for spam
&#64257;lters, because it is dominated by non-high speci&#64257;city (ham
recall) regions, which are of no interest in practice. Perhaps
one should compute the area for 1 &#8722; speci&#64257;city &#8712; [0, 0.2]
or [0, 0.1]. Even then, however, it is debatable how the area
should be computed when roc curves do not span the entire
[0, 0.2] or [0, 0.1] range of the horizontal axis (see below).

A &#64257;rst conclusion that can be drawn from the results of
Figure 2 is that some datasets, such as Enron4, are &#8220;easier&#8221;
than others, such as Enron1. There does not seem to be a
clear justi&#64257;cation for these di&#64256;erences, in terms of the ham-
spam ratio or the spam source used in each dataset.

Despite its theoretical association to term frequencies, in
all six datasets the multinomial nb seems to be doing better
when Boolean attributes are used, which agrees with Schnei-
der&#8217;s observations [25]. The di&#64256;erence, however, is in most
cases very small and not always statistically signi&#64257;cant; it
is clearer in the &#64257;rst dataset and, to a lesser extent, in the
last one. Furthermore, the multinomial nb with Boolean at-
tributes seems to be the best performer in 4 out of 6 datasets,
although again by a small and not always statistically sig-
ni&#64257;cant margin, and it is clearly outperformed only by fb in
the other 2 datasets. This is particularly interesting, since
many nb-based spam &#64257;lters appear to adopt the multino-
mial nb with tf attributes or the multi-variate Bernoulli nb
(which uses Boolean attributes); the latter seems to be the
worst among the nb versions we evaluated. Among the nb
versions that we tested with normalized tf attributes (fb
and the multi-variate Gauss nb), overall fb is clearly the
best. However, fb does not always outperform the other
nb version that uses non-Boolean attributes, namely the
multinomial nb with tf attributes.

The fb classi&#64257;er shows signs of impressive superiority in
Enron1 and Enron2; and its performance is almost undis-
tinguishable from that of the top performers in Enron5 and
Enron6. However, it does not perform equally well, com-
pared to the top performers, in the other two datasets (En-
ron3, Enron4), which strangely include what appears to be
the easiest dataset (Enron4). One problem we noticed with
fb is that its estimates for p(c | ~x) are very close to 0 or 1;
hence, varying the threshold T has no e&#64256;ect on the classi-
&#64257;cation of many messages. This did not allow us to obtain
higher ham recall (lower 1&#8722; speci&#64257;city) by trading o&#64256; spam
recall (sensitivity) as well as in the other nb versions, which
is why the fb roc curves are shorter in some of the diagrams.
(The same comment applies to the multi-variate Gauss nb.)
Having said that, we were able to reach a ham recall level
of 99.9% or higher with fb in most of the datasets.

Overall, the multinomial nb with Boolean attributes and
fb obtained the best results in our experiments, but the dif-

Figure 2: ROC curves of the &#64257;ve NB versions with 3000 attributes.

Enron1 - 3000 Attributes00.10.20.30.40.50.60.70.80.9100.020.040.060.080.10.120.140.160.180.21 - specificity (1 - ham recall)sensitivity (spam recall)Flexible BayesMultivariate NB, GaussianMultinomial NB, TFMutivariate NB, binaryMultinomial NB, binaryEnron2 - 3000 Attributes00.10.20.30.40.50.60.70.80.9100.020.040.060.080.10.120.140.160.180.21 - specificity (1 - ham recall)sensitivity (spam recall)Flexible BayesMultivariate NB, GaussianMultinomial NB, TFMutivariate NB, binaryMultinomial NB, binaryEnron3 - 3000 Attributes00.10.20.30.40.50.60.70.80.9100.020.040.060.080.10.120.140.160.180.21 - specificity (1 - ham recall)sensitivity (spam recall)Flexible BayesMultivariate NB, GaussianMultinomial NB, TFMutivariate NB, binaryMultinomial NB, binaryEnron4 - 3000 Attributes00.10.20.30.40.50.60.70.80.9100.020.040.060.080.10.120.140.160.180.21 - specificity (1 - ham recall)sensitivity (spam recall)Flexible BayesMultivariate NB, GaussianMultinomial NB, TFMutivariate NB, binaryMultinomial NB, binaryEnron5 - 3000 Attributes00.10.20.30.40.50.60.70.80.9100.020.040.060.080.10.120.140.160.180.21 - specificity (1 - ham recall)sensitivity (spam recall)Flexible BayesMultivariate NB, GaussianMultinomial NB, TFMutivariate NB, binaryMultinomial NB, binaryEnron6 - 3000 Attributes00.10.20.30.40.50.60.70.80.9100.020.040.060.080.10.120.140.160.180.21 - specificity (1 - ham recall)sensitivity (spam recall)Flexible BayesMultivariate NB, GaussianMultinomial NB, TFMutivariate NB, binaryMultinomial NB, binaryfb

mv Gauss

nb version Enr1
90.50
93.08
95.66
97.08
96.00

mv Bern.
mn Bool.

mn tf

Enr2
93.63
95.80
96.81
91.05
96.68

Enr3
96.94
97.55
95.04
97.42
96.94

Enr4
95.78
80.14
97.79
97.70
97.79

Enr5
99.56
95.42
99.42
97.95
99.69

Enr6
99.55
91.95
98.08
97.92
98.10

Avg.
95.99
92.32
97.13
96.52
97.53

Table 4: Spam recall (%) for 3000 attributes, T = 0.5.

fb

mv Gauss

nb version Enr1
97.64
94.83
94.00
93.19
95.25

mv Bern.
mn Bool.

mn tf

Enr2
98.83
96.97
96.78
97.22
97.83

Enr3
95.36
88.81
98.83
75.41
98.88

Enr4
96.61
99.39
98.30
95.86
99.05

Enr5
90.76
97.28
95.65
90.08
95.65

Enr6
89.97
95.87
95.12
82.52
96.88

Avg.
94.86
95.53
96.45
89.05
97.26

Table 5: Ham recall (%) for 3000 attributes, T = 0.5.

ferences from the other nb versions were often very small.
Taking into account its smoother trade-o&#64256; between ham and
spam recall, and its better computational complexity at run
time, we tend to prefer the multinomial nb with Boolean
attributes over fb, but further experiments are necessary to
establish its superiority with con&#64257;dence. For completeness,
Tables 4 and 5 list the spam and ham recall, respectively, of
the nb versions on the 6 datasets for T = 0.5, although com-
paring at a &#64257;xed threshold T is not particularly informative;
for example, two methods may obtain the same results at
di&#64256;erent thresholds. On average, the multinomial nb with
Boolean attributes again has the best results, both in spam
and ham recall.
4.3 Learning curves

Figure 3 shows the learning curves (spam and ham recall
as more training messages are accumulated over time) of the
multinomial nb with Boolean attributes on the six datasets
for T = 0.5.
It is interesting to observe that the curves
do not increase monotonically, unlike most text classi&#64257;ca-
tion experiments, presumably because of the unpredictable
&#64258;uctuation of the ham-spam ratio, the changing topics of
spam, and the adversarial nature of anti-spam &#64257;ltering. In
the &#8220;easiest&#8221; dataset (Enron4) the classi&#64257;er reaches almost
perfect performance, especially in terms of ham recall, after
a few hundreds of messages, and quickly returns to near-
perfect performance whenever a deviation occurs. As more
training messages are accumulated, the deviations from the
perfect performance almost disappear. In contrast, in more
di&#64259;cult datasets (e.g., Enron1) the &#64258;uctuation of ham and
spam recall is continuous. The classi&#64257;er seems to adapt
quickly to changes, though, avoiding prolonged plateaus of
low performance. Spam recall is particularly high and stable
in Enron5, but this comes at the expense of frequent large
&#64258;uctuations of ham recall; hence, the high spam recall may
be the e&#64256;ect of a tradeo&#64256; between spam and ham recall.

5. CONCLUSIONS AND FURTHER WORK
We discussed and evaluated experimentally in a spam &#64257;l-
tering context &#64257;ve di&#64256;erent versions of the Naive Bayes (nb)
classi&#64257;er. Our investigation included two versions of nb that
have not been used widely in the spam &#64257;ltering literature,
namely Flexible Bayes (fb) and the multinomial nb with
Boolean attributes. We emulated the situation faced by a
new user of a personalized learning-based spam &#64257;lter, adopt-

ing an incremental retraining and evaluation procedure. The
six datasets that we used, and which we make publicly avail-
able, were created by mixing freely available ham and spam
messages in di&#64256;erent proportions. The mixing procedure
emulates the unpredictable &#64258;uctuation over time of the ham-
spam ratio in real mailboxes.

Our evaluation included plotting roc curves, which al-
lowed us to compare the di&#64256;erent nb versions across the
entire tradeo&#64256; between true positives and true negatives.
The most interesting result of our evaluation was the very
good performance of the two nb versions that have been
used less in spam &#64257;ltering, i.e., fb and the multinomial nb
with Boolean attributes; these two versions collectively ob-
tained the best results in our experiments. Taking also into
account its lower computational complexity at run time and
its smoother trade-o&#64256; between ham and spam recall, we tend
to prefer the multinomial nb with Boolean attributes over
fb, but further experiments are needed to be con&#64257;dent. The
best results in terms of e&#64256;ectiveness were generally achieved
with the largest attribute set (3000 attributes), as one might
have expected, but the gain was rather insigni&#64257;cant, com-
pared to smaller and computationally cheaper attribute sets.
We are currently collecting more data, in a setting that
will allow us to evaluate the &#64257;ve nb versions and other learn-
ing algorithms on several real mailboxes with the incremen-
tal retraining and evaluation method. The obvious caveat of
these additional real-user experiments is that it will not be
possible to provide publicly the resulting datasets in a non-
encoded form. Therefore, we plan to release them using the
encoding scheme of the pu datasets.

6. REFERENCES
[1] I. Androutsopoulos, J. Koutsias, K. Chandrinos, and

C. Spyropoulos. An experimental comparison of Naive
Bayesian and keyword-based anti-spam &#64257;ltering with
encrypted personal e-mail messages. In 23rd ACM
SIGIR Conference, pages 160&#8211;167, Athens, Greece,
2000.

[2] I. Androutsopoulos, G. Paliouras, and E. Michelakis.

Learning to &#64257;lter unsolicited commercial e-mail.
technical report 2004/2, NCSR &#8220;Demokritos&#8221;, 2004.

[3] R. Beckermann, A. McCallum, and G. Huang.
Automatic categorization of email into folders:
benchmark experiments on Enron and SRI corpora.
Technical report IR-418, University of Massachusetts
Amherst, 2004.

[4] X. Carreras and L. Marquez. Boosting trees for

anti-spam email &#64257;ltering. In 4th International
Conference on Recent Advances in Natural Language
Processing, pages 58&#8211;64, Tzigov Chark, Bulgaria,
2001.

[5] P. Domingos and M. Pazzani. On the optimality of the
simple Bayesian classi&#64257;er under zero-one loss. Machine
Learning, 29(2&#8211;3):103130, 1997.

[6] H. D. Drucker, D. Wu, and V. Vapnik. Support Vector
Machines for spam categorization. IEEE Transactions
On Neural Networks, 10(5):1048&#8211;1054, 1999.

[7] S. Eyheramendy, D. Lewis, and D. Madigan. On the

Naive Bayes model for text categorization. In 9th
International Workshop on Arti&#64257;cial Intelligence and
Statistics, pages 332&#8211;339, Key West, Florida, 2003.

[8] T. Fawcett. In &#8220;vivo&#8221; spam &#64257;ltering: a challenge

Figure 3: Learning curves for the multinomial NB with Boolean attributes and T = 0.5.

problem for KDD. SIGKDD Explorations,
5(2):140&#8211;148, 2003.

[9] S. Hershkop and S. Stolfo. Combining email models
for false positive reduction. In 11th ACM SIGKDD
Conference, pages 98&#8211;107, Chicago, Illinois, 2005.

[10] J. G. Hidalgo. Evaluating cost-sensitive unsolicited
bulk email categorization. In 17th ACM Symposium
on Applied Computing, pages 615&#8211;620, 2002.

[11] J. G. Hidalgo and M. M. Lopez. Combining text and

heuristics for cost-sensitive spam &#64257;ltering. In 4th
Computational Natural Language Learning Workshop,
pages 99&#8211;102, Lisbon, Portugal, 2000.

[12] J. Hovold. Naive Bayes spam &#64257;ltering using

word-position-based attributes. In 2nd Conference on
Email and Anti-Spam, Stanford, CA, 2005.

[13] J. T. J.D.M. Rennie, L. Shih and D. Karger. Tackling

the poor assumptions of Naive Bayes classi&#64257;ers. In
20th International Conference on Machine Learning,
pages 616&#8211;623, Washington, DC, 2003.

[14] G. John and P. Langley. Estimating continuous

distributions in Bayesian classi&#64257;ers. In 11th
Conference on Uncertainty in Arti&#64257;cial Intelligence,
pages 338&#8211;345, Montreal, Quebec, 1995.

[15] B. Klimt and Y. Yang. The Enron corpus: a new

dataset for email classi&#64257;cation research. In 15th
European Conference on Machine Learning and the
8th European Conference on Principles and Practice
of Knowledge Discovery in Databases, pages 217&#8211;226,
Pisa, Italy, 2004.

[16] A. Kolcz and J. Alspector. SVM-based &#64257;ltering of
e-mail spam with content-speci&#64257;c misclassi&#64257;cation
costs. In Workshop on Text Mining, IEEE
International Conference on Data Mining, San Jose,
California, 2001.

[17] A. McCallum and K. Nigam. A comparison of event

models for naive bayes text classi&#64257;cation. In AAAI&#8217;98
Workshop on Learning for Text Categorization, pages
41&#8211;48, Madison, Wisconsin, 1998.

[18] E. Michelakis, I. Androutsopoulos, G. Paliouras,

G. Sakkis, and P. Stamatopoulos. Filtron: a
learning-based anti-spam &#64257;lter. In 1st Conference on
Email and Anti-Spam, Mountain View, CA, 2004.

[19] P. Pantel and D. Lin. SpamCop: a spam classi&#64257;cation

and organization program. In Learning for Text
Categorization &#8211; Papers from the AAAI Workshop,
pages 95&#8211;98, Madison, Wisconsin, 1998.

[20] F. Peng, D. Schuurmans, and S. Wang. Augmenting

naive bayes classi&#64257;ers with statistical language
models. Information Retrieval, 7:317&#8211;345, 2004.

[21] M. Sahami, S. Dumais, D. Heckerman, and

E. Horvitz. A Bayesian approach to &#64257;ltering junk
e-mail. In Learning for Text Categorization &#8211; Papers
from the AAAI Workshop, pages 55&#8211;62, Madison,
Wisconsin, 1998.

[22] G. Sakkis, I. Androutsopoulos, G. Paliouras,

V. Karkaletsis, C. Spyropoulos, and P. Stamatopoulos.
Stacking classi&#64257;ers for anti-spam &#64257;ltering of e-mail. In
Conference on Empirical Methods in Natural
Language Processing, pages 44&#8211;50, Carnegie Mellon
University, Pittsburgh, PA, 2001.

[23] G. Sakkis, I. Androutsopoulos, G. Paliouras,

V. Karkaletsis, C. Spyropoulos, and P. Stamatopoulos.
A memory-based approach to anti-spam &#64257;ltering for
mailing lists. Information Retrieval, 6(1):49&#8211;73, 2003.

[24] K.-M. Schneider. A comparison of event models for

Naive Bayes anti-spam e-mail &#64257;ltering. In 10th
Conference of the European Chapter of the ACL,
pages 307&#8211;314, Budapest, Hungary, 2003.

[25] K.-M. Schneider. On word frequency information and
negative evidence in Naive Bayes text classi&#64257;cation. In
4th International Conference on Advances in Natural
Language Processing, pages 474&#8211;485, Alicante, Spain,
2004.

Enron1 - Multinomial NB, Boolean - 3000 Attributes 0.70.750.80.850.90.9511471013161922252831343740434649Number of emails x 100Spam RecallHam RecallEnron2 - Multinomial NB, Boolean - 3000 Attributes 0.70.750.80.850.90.9511471013161922252831343740434649525558Number of emails x 100Spam RecallHam RecallEnron3 - Multinomial NB, Boolean - 3000 Attributes 0.70.750.80.850.90.95114710131619222528313437404346495255Number of emails x 100Spam RecallHam RecallEnron4 - Multinomial NB, Boolean - 3000 Attributes0.70.750.80.850.90.9511471013161922252831343740434649525558Number of emails x 100Spam RecallHam RecallEnron5 - Multinomial NB, Boolean - 3000 Attributes 0.70.750.80.850.90.9511471013161922252831343740434649Number of emails x 100Spam RecallHam RecallEnron6 - Multinomial NB, Boolean - 3000 Attributes 0.70.750.80.850.90.9511471013161922252831343740434649525558Number of emails x 100Spam RecallHam Recall</auteur><abstract>Naive Bayes is very popular in commercial and open-sourceanti-spam e-mail &#64257;lters. There are, however, several formsof Naive Bayes, something the anti-spam literature does notalways acknowledge. We discuss &#64257;ve di&#64256;erent versions ofNaive Bayes, and compare them on six new, non-encodeddatasets, that contain ham messages of particular Enronusers and fresh spam messages. The new datasets, whichwe make publicly available, are more realistic than previouscomparable benchmarks, because they maintain the tempo-ral order of the messages in the two categories, and theyemulate the varying proportion of spam and ham messagesthat users receive over time. We adopt an experimentalprocedure that emulates the incremental training of person-alized spam &#64257;lters, and we plot roc curves that allow us tocompare the di&#64256;erent versions of nb over the entire tradeo&#64256;between true positives and true negatives.</abstract><biblio>bibliography not found</biblio></article>